'use strict';function create(defaults){var newValidatorList;if('undefined'==typeof defaults&&(defaults=[]),!Array.isArray(defaults))throw new Error('create(defaults) expects a single argument: defaults {array of validator objects}');return newValidatorList=Object.create(validatorList),newValidatorList.validators={},defaults.forEach(function(validatorOptions){newValidatorList.set(validatorOptions)}),newValidatorList}var sh=require('./simple-helpers'),_=require('lodash'),validatorList,validatorOptionsTemplate={name:'foo',isValid:function(){},message:'bar'};validatorList={set:function(options){var optionsWithoutName,self=this;if(!sh.objectsAreSimilar(options,validatorOptionsTemplate))throw new Error('set(options) expects one argument: options {validator object}');this.validators[options.name]={},optionsWithoutName=_.cloneDeep(options),delete optionsWithoutName.name,_.forOwn(optionsWithoutName,function(value,key){self.validators[options.name][key]=value})},get:function(name){if('string'!=typeof name||0===name.length)throw new Error('get(name) expects one arguments: name {string}');return'undefined'!=typeof this.validators[name]?this.validators[name]:null},remove:function(name){if('string'!=typeof name||0===name.length)throw new Error('remove(name) expects one arguments: name {string}');delete this.validators[name]},removeAll:function(){this.validators={}},getAll:function(){return this.validators}},module.exports={create:create};