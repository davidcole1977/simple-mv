function create(defaults){if('undefined'==typeof defaults&&(defaults={}),Array.isArray(defaults)||'object'!=typeof defaults)throw new Error('create(defaults) expects a single argument: defaults {object containing default validators}');var newValidatorList=Object.create(validatorList);return newValidatorList.validators={},Object.keys(defaults).forEach(function(key){newValidatorList.set(key,defaults[key])}),newValidatorList}var validatorList;validatorList={set:function(name,validator){if(arguments.length<2||'string'!=typeof name||0===name.length||'function'!=typeof validator)throw new Error('set(name, validator) expects two arguments: name {string}, validator {function}');this.validators[name]=validator},get:function(name){if('string'!=typeof name||0===name.length)throw new Error('get(name) expects one arguments: name {string}');return'undefined'!=typeof this.validators[name]?this.validators[name]:null},remove:function(name){if('string'!=typeof name||0===name.length)throw new Error('remove(name) expects one arguments: name {string}');delete this.validators[name]},removeAll:function(){this.validators={}},getAll:function(){return this.validators}},module.exports={create:create};