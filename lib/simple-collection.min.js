'use strict';function create(options){var newCollection;if(options='object'==typeof options?options:{},newCollection.on=spm.on.bind(newCollection),newCollection.off=spm.off.bind(newCollection),newCollection.fetch=spm.fetch.bind(newCollection),newCollection.save=spm.save.bind(newCollection),newCollection=Object.create(collectionPrototype),newCollection.id=_.uniqueId('collection_'),newCollection.subsList=modelSubsLists.create(),newCollection.selfSubscriptions={},sh.overridesProps(collectionPrototype,options))throw new Error('create(): Overriding collection prototype parameters is not permitted');return _.assign(newCollection,_.cloneDeep(defaultOptions),_.cloneDeep(options)),'function'==typeof options.initialise&&options.initialise.call(newCollection),newCollection}function extend(options){if(!sh.isAnObject(options))throw new Error('extend(options) expects a single argument: options {object}');return{create:create.bind(null,options)}}var sh=require('./simple-helpers'),_=require('lodash'),spm=require('./simple-prototype-methods'),modelSubsLists=require('./model-subscriptions'),GLOBAL_CONFIG=require('./global-config'),EVENT_TYPES=GLOBAL_CONFIG.EVENT_TYPES,collectionPrototype,defaultOptions;collectionPrototype={emitCollectionEvent:function(keypath,eventType){var publishParams={};this.subsList.publish(eventType,publishParams)}},defaultOptions={models:[],saver:null,fetcher:null},module.exports={create:create,extend:extend};