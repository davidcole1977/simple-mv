'use strict';function valuePassesAllValidators(value,validators){var allRulesAreValid;return allRulesAreValid=Object.keys(validators).every(function(validatorName){return validators[validatorName].isValid(value)})}function create(){var newModel;return newModel=Object.create(model),newModel.data={},newModel.validatorsMap={},newModel.id=_.uniqueId('model_'),newModel}var sh=require('./simple-helpers'),_=require('lodash'),modelValidators=require('./model-validators'),modelSubs=require('./model-subscriptions'),GLOBAL_CONFIG=require('./global-config'),EVENT_TYPES=GLOBAL_CONFIG.EVENT_TYPES,model;model={set:function(keypath,value){var eventType;if('string'!=typeof keypath||0===keypath.length)throw new Error('set(keypath, value) expects two arguments, the first of which (keypath) should be a string');if('undefined'!=typeof this.validatorsMap[keypath]&&!valuePassesAllValidators(value,this.validatorsMap[keypath]))throw new Error('set(keypath, value) value failed assigned validation');eventType='undefined'==typeof this.data[keypath]?EVENT_TYPES.DATUM_CREATE:EVENT_TYPES.DATUM_UPDATE,this.data[keypath]='undefined'!=typeof value?_.cloneDeep(value):null,this.emitDatumEvent(keypath,eventType),this.emitModelEvent(keypath,EVENT_TYPES.MODEL_UPDATE)},get:function(key){if('string'!=typeof key)throw new Error('get(key) expects a single string as an argument');if(!(key in this.data))throw new Error('get(key) there is no parameter with the specified key');return _.cloneDeep(this.data[key])},remove:function(key){if('string'!=typeof key)throw new Error('delete(key) expects a single string as an argument');delete this.data[key]},getRawData:function(){return _.cloneDeep(this.data)},assignValidator:function(keypath,validatorName){this.validatorsMap[keypath]||(this.validatorsMap[keypath]={}),this.validatorsMap[keypath][validatorName]=modelValidators.get(validatorName)},isValid:function(keypath){return valuePassesAllValidators(this.get(keypath),this.validatorsMap[keypath])},emitModelEvent:function(keypath,eventType){var topicName=this.id+':'+eventType,publishParams={keypath:keypath,model:this};modelSubs.publish(topicName,publishParams)},emitDatumEvent:function(keypath,eventType){var topicName=this.id+':'+keypath+':'+eventType,publishParams={value:this.data[keypath],parentModel:this};modelSubs.publish(topicName,publishParams)}},module.exports={create:create};