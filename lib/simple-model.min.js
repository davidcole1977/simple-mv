'use strict';function valuePassesAllValidators(value,validators){return validators.every(function(validatorName){return modelValidators.get(validatorName).isValid(value)})}function create(options){var newModel;if(options='object'==typeof options?options:{},newModel=Object.create(modelPrototype),newModel.id=_.uniqueId('model_'),newModel.subsList=modelSubsLists.create(),newModel.selfSubscriptions={},newModel.on=spm.on.bind(newModel),newModel.off=spm.off.bind(newModel),newModel.fetch=spm.fetch.bind(newModel),newModel.save=spm.save.bind(newModel),sh.overridesProps(modelPrototype,options))throw new Error('create(): Overriding model prototype parameters is not permitted');return _.assign(newModel,_.cloneDeep(defaultOptions),_.cloneDeep(options)),'function'==typeof options.initialise&&options.initialise.call(newModel),newModel}function extend(options){if(!sh.isAnObject(options))throw new Error('extend(options) expects a single argument: options {object}');return{create:create.bind(null,options)}}var sh=require('./simple-helpers'),_=require('lodash'),spm=require('./simple-prototype-methods'),modelValidators=require('./model-validators'),modelSubsLists=require('./model-subscriptions'),GLOBAL_CONFIG=require('./global-config'),EVENT_TYPES=GLOBAL_CONFIG.EVENT_TYPES,modelPrototype,defaultOptions;modelPrototype={set:function(keypath,value){var eventType;if('string'!=typeof keypath||0===keypath.length)throw new Error('set(keypath, value) expects two arguments, the first of which (keypath) should be a string');if('undefined'==typeof this.data[keypath]||this.data[keypath]!==value){if(this.validationFailPreventsSet&&'undefined'!=typeof this.validatorsMap[keypath]&&!valuePassesAllValidators(value,this.validatorsMap[keypath]))throw new Error('set(keypath, value) value failed assigned validation');eventType='undefined'==typeof this.data[keypath]?EVENT_TYPES.DATUM_CREATE:EVENT_TYPES.DATUM_UPDATE,this.data[keypath]='undefined'!=typeof value?_.cloneDeep(value):null,this.emitDatumEvent(keypath,eventType)}},get:function(keypath){if('string'!=typeof keypath)throw new Error('get(keypath) expects a single string as an argument');if(!(keypath in this.data))throw new Error('get(keypath) there is no parameter with the specified keypath');return _.cloneDeep(this.data[keypath])},remove:function(keypath){if('string'!=typeof keypath)throw new Error('remove(keypath) expects a single string as an argument');delete this.data[keypath],this.emitDatumEvent(keypath,EVENT_TYPES.DATUM_REMOVE)},getRawData:function(){return _.cloneDeep(this.data)},assignValidator:function(keypath,validatorName){this.validatorsMap[keypath]||(this.validatorsMap[keypath]=[]),-1===this.validatorsMap[keypath].indexOf(validatorName)&&this.validatorsMap[keypath].push(validatorName)},isValid:function(keypath){return valuePassesAllValidators(this.get(keypath),this.validatorsMap[keypath])},emitDatumEvent:function(keypath,eventType){var publishParams={keypath:keypath,model:this,eventType:eventType};this.subsList.publish(eventType,publishParams),this.subsList.publish(eventType+':'+keypath,publishParams)},emitModelEvent:function(){}},defaultOptions={validatorsMap:{},data:{},validationFailPreventsSet:!0,saver:null,fetcher:null},module.exports={create:create,extend:extend};