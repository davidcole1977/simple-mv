'use strict';function create(){var newModel;return newModel=Object.create(model),newModel.data={},newModel.validatorsMap={},newModel}var sh=require('./simple-helpers'),_=require('lodash'),modelValidators=require('./model-validators'),model;model={set:function(key,value){if('string'!=typeof key||0===key.length)throw new Error('set(key, value) expects two arguments, the first of which (key) should be a string');this.data[key]='undefined'!=typeof value?_.cloneDeep(value):null},get:function(key){if('string'!=typeof key)throw new Error('get(key) expects a single string as an argument');if(!(key in this.data))throw new Error('get(key) there is no parameter with the specified key');return _.cloneDeep(this.data[key])},remove:function(key){if('string'!=typeof key)throw new Error('delete(key) expects a single string as an argument');delete this.data[key]},getRawData:function(){var rawData={};return _.forOwn(this.data,function(datum,key){rawData[key]=_.cloneDeep(datum)}),rawData},assignValidator:function(keypath,validatorName){this.validatorsMap[keypath]||(this.validatorsMap[keypath]={}),this.validatorsMap[keypath][validatorName]=modelValidators.get(validatorName)},isValid:function(keypath){var allRulesAreValid;return allRulesAreValid=Object.keys(this.validatorsMap[keypath]).every(function(validatorName){return this.validatorsMap[keypath][validatorName].isValid(this.data[keypath])}.bind(this))}},module.exports={create:create};