'use strict';function valuePassesAllValidators(value,validators){var allRulesAreValid;return allRulesAreValid=Object.keys(validators).every(function(validatorName){return validators[validatorName].isValid(value)})}function create(){var newModel;return newModel=Object.create(model),newModel.data={},newModel.validatorsMap={},newModel.id=_.uniqueId('model_'),newModel.subsList=modelSubsLists.create(),newModel}var sh=require('./simple-helpers'),_=require('lodash'),modelValidators=require('./model-validators'),modelSubsLists=require('./model-subscriptions'),GLOBAL_CONFIG=require('./global-config'),EVENT_TYPES=GLOBAL_CONFIG.EVENT_TYPES,model;model={set:function(keypath,value){var eventType;if('string'!=typeof keypath||0===keypath.length)throw new Error('set(keypath, value) expects two arguments, the first of which (keypath) should be a string');if('undefined'!=typeof this.validatorsMap[keypath]&&!valuePassesAllValidators(value,this.validatorsMap[keypath]))throw new Error('set(keypath, value) value failed assigned validation');('undefined'==typeof this.data[keypath]||this.data[keypath]!==value)&&(eventType='undefined'==typeof this.data[keypath]?EVENT_TYPES.DATUM_CREATE:EVENT_TYPES.DATUM_UPDATE,this.data[keypath]='undefined'!=typeof value?_.cloneDeep(value):null,this.emitDatumEvent(keypath,eventType))},get:function(keypath){if('string'!=typeof keypath)throw new Error('get(keypath) expects a single string as an argument');if(!(keypath in this.data))throw new Error('get(keypath) there is no parameter with the specified keypath');return _.cloneDeep(this.data[keypath])},remove:function(keypath){if('string'!=typeof keypath)throw new Error('remove(keypath) expects a single string as an argument');delete this.data[keypath],this.emitDatumEvent(keypath,EVENT_TYPES.DATUM_REMOVE)},getRawData:function(){return _.cloneDeep(this.data)},assignValidator:function(keypath,validatorName){this.validatorsMap[keypath]||(this.validatorsMap[keypath]={}),this.validatorsMap[keypath][validatorName]=modelValidators.get(validatorName)},isValid:function(keypath){return valuePassesAllValidators(this.get(keypath),this.validatorsMap[keypath])},emitDatumEvent:function(keypath,eventType){var publishParams={keypath:keypath,model:this,eventType:eventType};this.subsList.publish(eventType,publishParams),this.subsList.publish(eventType+':'+keypath,publishParams)}},module.exports={create:create};